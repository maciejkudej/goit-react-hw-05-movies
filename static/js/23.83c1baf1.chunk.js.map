{"version":3,"file":"static/js/23.83c1baf1.chunk.js","mappings":"gOAsDA,UAjDgB,WACd,IAAQA,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAyBJ,EAAAA,EAAAA,WAAS,GAAzBK,GAAT,eAuBA,IArBAC,EAAAA,EAAAA,YAAU,WACR,GAAKR,EAAL,CACA,IAAMS,EAAU,mCAAG,2FACjBL,EAAS,IADQ,mBAGIM,EAAAA,EAAAA,IAAWV,GAHf,OAGTW,EAHS,OAKfL,EAAaK,GALE,gDAOfP,EAAS,2CAPM,yBASfG,GAAa,GATE,4EAAH,qDAYhBE,GAbqB,CActB,GAAE,CAACT,KACJQ,EAAAA,EAAAA,YAAU,WACHL,GACLS,EAAAA,GAAAA,MAAYT,EACb,GAAE,CAACA,IAECE,EAGL,OAAOA,EAAUQ,OAAS,GACxB,8BACE,0BACE,+BACGR,QADH,IACGA,OADH,EACGA,EAAWS,KAAI,SAAAC,GAAM,OACpB,2BACE,6CACVA,EAAOC,WACG,mBACA,mCAASD,EAAOE,aAJTF,EAAOG,GADI,WAY5B,wBAAI,oCAEP,C,+LC/CM,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACkBC,EAAAA,EAAAA,IAAU,wBAD5B,uBACGT,EADH,EACGA,KADH,kBAEEA,GAFF,kEAIA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gGAAsCC,EAAtC,+BAA6C,EAC5CC,EAAS,CAAEF,MAAAA,EAAOG,SAAU,QAASF,KAAAA,GADtC,SAEkBH,EAAAA,EAAAA,IAAU,gBAAiB,CAAEI,OAAAA,IAF/C,uBAEGb,EAFH,EAEGA,KAFH,kBAGEA,GAHF,mEAKA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAA6BR,GAA7B,yFACkBE,EAAAA,EAAAA,IAAA,iBAAoBF,IADtC,uBACGP,EADH,EACGA,KADH,kBAEEA,GAFF,kEAIA,SAAegB,EAAtB,+CAAO,OAAP,oBAAO,WAAuBT,GAAvB,yFACkBE,EAAAA,EAAAA,IAAA,iBAAoBF,EAApB,aADlB,uBACGP,EADH,EACGA,KADH,kBAEEA,EAAKiB,MAFP,kEAIA,SAAelB,EAAtB,+CAAO,OAAP,oBAAO,WAA0BQ,GAA1B,yFACkBE,EAAAA,EAAAA,IAAA,iBAAoBF,EAApB,aADlB,uBACGP,EADH,EACGA,KADH,kBAEEA,EAAKkB,SAFP,kEApBPT,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CAAEU,QAFV,mC","sources":["components/reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getReviews } from 'services/api';\n\nconst Reviews = () => {\n  const { moviesId } = useParams();\n  const [error, setError] = useState('');\n  const [movieData, setMovieData] = useState([]);\n  const [, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!moviesId) return;\n    const fetchMovie = async () => {\n      setError('');\n      try {\n        const data = await getReviews(moviesId);\n\n        setMovieData(data);\n      } catch (error) {\n        setError('There is something wrong in your action');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [moviesId]);\n  useEffect(() => {\n    if (!error) return;\n    toast.error(error);\n  }, [error]);\n\n  if (!movieData) {\n    return;\n  }\n  return movieData.length > 0 ? (\n    <section>\n      <div>\n        <ul>\n          {movieData?.map(review => (\n            <li key={review.id}>\n              <div>{`Author\n: ${review.author}`}</div>\n              <br />\n              <div>{`${review.content}`}</div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  ) : (\n    <h4>There is not any reviews for now</h4>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '259df17d3f26a67b233d16c7dad06e96';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function getTranding() {\n  const { data } = await axios.get('/trending/movie/week');\n  return data;\n}\nexport async function getMovieByQuery(query, page = 1) {\n  const params = { query, language: 'en-US', page };\n  const { data } = await axios.get('/search/movie', { params });\n  return data;\n}\nexport async function getMoviesById(id) {\n  const { data } = await axios.get(`/movie/${id}`);\n  return data;\n}\nexport async function getCast(id) {\n  const { data } = await axios.get(`/movie/${id}/credits`);\n  return data.cast;\n}\nexport async function getReviews(id) {\n  const { data } = await axios.get(`/movie/${id}/reviews`);\n  return data.results;\n}\n"],"names":["moviesId","useParams","useState","error","setError","movieData","setMovieData","setIsLoading","useEffect","fetchMovie","getReviews","data","toast","length","map","review","author","content","id","getTranding","axios","getMovieByQuery","query","page","params","language","getMoviesById","getCast","cast","results","api_key"],"sourceRoot":""}